// Code generated by ent, DO NOT EDIT.

package books

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Books {
	return predicate.Books(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Books {
	return predicate.Books(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Books {
	return predicate.Books(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Books {
	return predicate.Books(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Books {
	return predicate.Books(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Books {
	return predicate.Books(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Books {
	return predicate.Books(sql.FieldLTE(FieldID, id))
}

// BookName applies equality check predicate on the "book_name" field. It's identical to BookNameEQ.
func BookName(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldBookName, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldAuthor, v))
}

// PublishDate applies equality check predicate on the "publish_date" field. It's identical to PublishDateEQ.
func PublishDate(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldPublishDate, v))
}

// BookNameEQ applies the EQ predicate on the "book_name" field.
func BookNameEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldBookName, v))
}

// BookNameNEQ applies the NEQ predicate on the "book_name" field.
func BookNameNEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldNEQ(FieldBookName, v))
}

// BookNameIn applies the In predicate on the "book_name" field.
func BookNameIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldIn(FieldBookName, vs...))
}

// BookNameNotIn applies the NotIn predicate on the "book_name" field.
func BookNameNotIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldNotIn(FieldBookName, vs...))
}

// BookNameGT applies the GT predicate on the "book_name" field.
func BookNameGT(v string) predicate.Books {
	return predicate.Books(sql.FieldGT(FieldBookName, v))
}

// BookNameGTE applies the GTE predicate on the "book_name" field.
func BookNameGTE(v string) predicate.Books {
	return predicate.Books(sql.FieldGTE(FieldBookName, v))
}

// BookNameLT applies the LT predicate on the "book_name" field.
func BookNameLT(v string) predicate.Books {
	return predicate.Books(sql.FieldLT(FieldBookName, v))
}

// BookNameLTE applies the LTE predicate on the "book_name" field.
func BookNameLTE(v string) predicate.Books {
	return predicate.Books(sql.FieldLTE(FieldBookName, v))
}

// BookNameContains applies the Contains predicate on the "book_name" field.
func BookNameContains(v string) predicate.Books {
	return predicate.Books(sql.FieldContains(FieldBookName, v))
}

// BookNameHasPrefix applies the HasPrefix predicate on the "book_name" field.
func BookNameHasPrefix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasPrefix(FieldBookName, v))
}

// BookNameHasSuffix applies the HasSuffix predicate on the "book_name" field.
func BookNameHasSuffix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasSuffix(FieldBookName, v))
}

// BookNameEqualFold applies the EqualFold predicate on the "book_name" field.
func BookNameEqualFold(v string) predicate.Books {
	return predicate.Books(sql.FieldEqualFold(FieldBookName, v))
}

// BookNameContainsFold applies the ContainsFold predicate on the "book_name" field.
func BookNameContainsFold(v string) predicate.Books {
	return predicate.Books(sql.FieldContainsFold(FieldBookName, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Books {
	return predicate.Books(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Books {
	return predicate.Books(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Books {
	return predicate.Books(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Books {
	return predicate.Books(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Books {
	return predicate.Books(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Books {
	return predicate.Books(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Books {
	return predicate.Books(sql.FieldContainsFold(FieldAuthor, v))
}

// PublishDateEQ applies the EQ predicate on the "publish_date" field.
func PublishDateEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldEQ(FieldPublishDate, v))
}

// PublishDateNEQ applies the NEQ predicate on the "publish_date" field.
func PublishDateNEQ(v string) predicate.Books {
	return predicate.Books(sql.FieldNEQ(FieldPublishDate, v))
}

// PublishDateIn applies the In predicate on the "publish_date" field.
func PublishDateIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldIn(FieldPublishDate, vs...))
}

// PublishDateNotIn applies the NotIn predicate on the "publish_date" field.
func PublishDateNotIn(vs ...string) predicate.Books {
	return predicate.Books(sql.FieldNotIn(FieldPublishDate, vs...))
}

// PublishDateGT applies the GT predicate on the "publish_date" field.
func PublishDateGT(v string) predicate.Books {
	return predicate.Books(sql.FieldGT(FieldPublishDate, v))
}

// PublishDateGTE applies the GTE predicate on the "publish_date" field.
func PublishDateGTE(v string) predicate.Books {
	return predicate.Books(sql.FieldGTE(FieldPublishDate, v))
}

// PublishDateLT applies the LT predicate on the "publish_date" field.
func PublishDateLT(v string) predicate.Books {
	return predicate.Books(sql.FieldLT(FieldPublishDate, v))
}

// PublishDateLTE applies the LTE predicate on the "publish_date" field.
func PublishDateLTE(v string) predicate.Books {
	return predicate.Books(sql.FieldLTE(FieldPublishDate, v))
}

// PublishDateContains applies the Contains predicate on the "publish_date" field.
func PublishDateContains(v string) predicate.Books {
	return predicate.Books(sql.FieldContains(FieldPublishDate, v))
}

// PublishDateHasPrefix applies the HasPrefix predicate on the "publish_date" field.
func PublishDateHasPrefix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasPrefix(FieldPublishDate, v))
}

// PublishDateHasSuffix applies the HasSuffix predicate on the "publish_date" field.
func PublishDateHasSuffix(v string) predicate.Books {
	return predicate.Books(sql.FieldHasSuffix(FieldPublishDate, v))
}

// PublishDateEqualFold applies the EqualFold predicate on the "publish_date" field.
func PublishDateEqualFold(v string) predicate.Books {
	return predicate.Books(sql.FieldEqualFold(FieldPublishDate, v))
}

// PublishDateContainsFold applies the ContainsFold predicate on the "publish_date" field.
func PublishDateContainsFold(v string) predicate.Books {
	return predicate.Books(sql.FieldContainsFold(FieldPublishDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Books) predicate.Books {
	return predicate.Books(func(s *sql.Selector) {
		p(s.Not())
	})
}
