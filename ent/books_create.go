// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/books"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BooksCreate is the builder for creating a Books entity.
type BooksCreate struct {
	config
	mutation *BooksMutation
	hooks    []Hook
}

// SetBookName sets the "book_name" field.
func (bc *BooksCreate) SetBookName(s string) *BooksCreate {
	bc.mutation.SetBookName(s)
	return bc
}

// SetAuthor sets the "author" field.
func (bc *BooksCreate) SetAuthor(s string) *BooksCreate {
	bc.mutation.SetAuthor(s)
	return bc
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bc *BooksCreate) SetNillableAuthor(s *string) *BooksCreate {
	if s != nil {
		bc.SetAuthor(*s)
	}
	return bc
}

// SetPublishDate sets the "publish_date" field.
func (bc *BooksCreate) SetPublishDate(s string) *BooksCreate {
	bc.mutation.SetPublishDate(s)
	return bc
}

// Mutation returns the BooksMutation object of the builder.
func (bc *BooksCreate) Mutation() *BooksMutation {
	return bc.mutation
}

// Save creates the Books in the database.
func (bc *BooksCreate) Save(ctx context.Context) (*Books, error) {
	bc.defaults()
	return withHooks[*Books, BooksMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BooksCreate) SaveX(ctx context.Context) *Books {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BooksCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BooksCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BooksCreate) defaults() {
	if _, ok := bc.mutation.Author(); !ok {
		v := books.DefaultAuthor
		bc.mutation.SetAuthor(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BooksCreate) check() error {
	if _, ok := bc.mutation.BookName(); !ok {
		return &ValidationError{Name: "book_name", err: errors.New(`ent: missing required field "Books.book_name"`)}
	}
	if _, ok := bc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Books.author"`)}
	}
	if _, ok := bc.mutation.PublishDate(); !ok {
		return &ValidationError{Name: "publish_date", err: errors.New(`ent: missing required field "Books.publish_date"`)}
	}
	return nil
}

func (bc *BooksCreate) sqlSave(ctx context.Context) (*Books, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BooksCreate) createSpec() (*Books, *sqlgraph.CreateSpec) {
	var (
		_node = &Books{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: books.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: books.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.BookName(); ok {
		_spec.SetField(books.FieldBookName, field.TypeString, value)
		_node.BookName = value
	}
	if value, ok := bc.mutation.Author(); ok {
		_spec.SetField(books.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := bc.mutation.PublishDate(); ok {
		_spec.SetField(books.FieldPublishDate, field.TypeString, value)
		_node.PublishDate = value
	}
	return _node, _spec
}

// BooksCreateBulk is the builder for creating many Books entities in bulk.
type BooksCreateBulk struct {
	config
	builders []*BooksCreate
}

// Save creates the Books entities in the database.
func (bcb *BooksCreateBulk) Save(ctx context.Context) ([]*Books, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Books, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BooksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BooksCreateBulk) SaveX(ctx context.Context) []*Books {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BooksCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BooksCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
